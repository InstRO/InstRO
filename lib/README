How to use this pre-alpha :)

Before starting to check out code, please read this documentation completely!

1) Prerequisites:
One needs an LLVM/Clang version built from source.
The top level of the LLVM/Clang needs to be exportet to the environmnet variable

CLANG_BASE

The Makefile assumes the following structure:
CLANG_BASE
	|- llvm-toplevel-repository
	|- llvm-toplevel-build
	|- llvm-toplevel-install


2) Building
2a) Build LLVM/Clang:
First build LLVM/Clang in the directory denoted above as CLANG_BASE/llvm-toplevel-build with the
invocation line (maybe a little adapted to your needs)
../llvm-toplevel-repository/configure --prefix=CLANG_BASE/llvm-toplevel-install [Enter]

make -j YY [Enter]

This takes some time...

2b) Build InstRO v5:
Make sure CLANG_BASE is set to the appropriate location.
Change the location where TOP_LEVEL points to in the Makefile to the appropriate location.

Type:

make -j YY [Enter]


# This should be all you need to do in order to build InstRO v5 for now.


Usage:

Clang based tool:
	The clang based tool is a standalone source-to-source tool.
	So just export the location to your PATH variable or use a fully-qualified path to invoke the executable on a file.

	ATTENTION DANGER!!!! AS OF TODAY THE ORIGINAL FILE WILL BE OVERWRITTEN!!!!!
	Make sure you ARE working on a copy of your original source file!


LLVM based tool:
	For now the LLVM based work is implemented as a pass for the modular optimizer.
	First: Use Clang to emit LLVM bitcode from the C++ sources.
	Second: Use the LLVM modular optimizer to apply transformations on the LLVM IR and unparse them.
	Third: Translate the LLVM byte code files into Assembler using LLVM's assembler.
	Fourth: Assemble the generated files using GCC.

	Fifth:	Fortunately there exists a script for steps One through Three.
					The script needs some manual changes to the location where to find the .so object to load
